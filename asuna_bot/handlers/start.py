"""
–ö–æ–º–∞–Ω–¥–æ–π /start –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Ä–µ–ª–∏–∑ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–∞—Ç–∞
–µ—Å–ª–∏ –Ω–µ—É–¥–∞—á–Ω–æ:
–ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ id —Ä–µ–ª–∏–∑–∞
–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–≤–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ä–µ–ª–∏–∑–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
—Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ –ë–î  
"""

from aiogram import Router, types, html
from aiogram.filters import CommandObject, Command
from loguru import logger as log
from asuna_bot.db.mongo import Mongo as db
from asuna_bot.filters.admins import AllowedUserFilter
from asuna_bot.filters.chat_type import ChatTypeFilter
from asuna_bot.db.odm import Release
from aiogram import Bot
from anilibria import AniLibriaClient, Title
from asuna_bot.config import CONFIG

start_router = Router()
start_router.message.filter(AllowedUserFilter(), Command("start"))


async def add_release(chat_id, title: Title):
    release = Release(
        id=title.id,
        chat_id=chat_id,
        status=title.status.string,
        code=title.code,
        en_title=title.names.en,
        ru_title=title.names.ru,
        is_ongoing=True,
        episodes=None,
    )
    await db.add_release(chat_id, release)


async def is_title_exist(message, title_id):
    # –µ—Å–ª–∏ —Ç–∞–π—Ç–ª —Å —ç—Ç–∏–º id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≥–¥–µ-—Ç–æ –≤ –±–∞–∑–µ
    chat = await db.get_chat_id_by_title_id(title_id)
    if chat:
        if chat.id != message.chat.id:
            await message.answer(
                "–≠—Ç–æ—Ç —Ç–∞–π—Ç–ª —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –¥—Ä—É–≥–∏–º —á–∞—Ç–æ–º!\n"
                + html.bold(chat.name)
            )

        if chat.id == message.chat.id:
            await message.answer("–≠—Ç–æ—Ç —Ç–∞–π—Ç–ª —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ —Ç–µ–∫—É—â–∏–º —á–∞—Ç–æ–º!")

        return True
    return False


async def search_title(message: types.Message):
    libria = AniLibriaClient()
    try:
        titles = await libria.search_titles(
            message.chat.title.split("/")[0],
            filter="id,code,names,status,season,type,team"
        )
    except Exception as e:
        log.error(e)
        return

    del libria
    return titles


async def send_title_to_chat(titles, chat_id):
    bot = Bot(token=CONFIG.bot.token)

    await bot.send_message(chat_id, titles.list[0].code)

    if titles.pagination.total_items > 1:
        await bot.send_message(chat_id, "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π—Ç–ª–æ–≤!")
        # TODO –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Å —Ç–∞–π—Ç–ª–∞–º–∏
    else:
        await add_release(chat_id, titles.list[0])
        await bot.send_message(chat_id, f"–¢–∞–π—Ç–ª: {html.bold(titles.list[0].names.ru)} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ —ç—Ç–∏–º —á–∞—Ç–æ–º")


async def id_search_title(message: types.Message, command: CommandObject):
    al_title_id = int(command.args)

    exist = await is_title_exist(message, al_title_id)
    if exist:
        return

    libria = AniLibriaClient()
    try:
        title = await libria.get_title(al_title_id, filter="id,code,names,status,season,type,team")
        if not title:
            await message.answer(f"–¢–∞–π—Ç–ª c id {str(al_title_id)} –Ω–µ –Ω–∞–π–¥–µ–Ω üßê")
            return False

        await add_release(message, title)
        await message.answer(f"–¢–∞–π—Ç–ª: {html.bold(title.names.ru)} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ —ç—Ç–∏–º —á–∞—Ç–æ–º")

    except AttributeError as err:
        log.error(err)
        await message.answer(str(err))


@start_router.message(ChatTypeFilter(chat_type="supergroup"))
async def cmd_start(message: types.Message, command: CommandObject):
    # –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    chat = await db.get_chat(message.chat.id)
    if not chat:
        await db.add_chat(message.chat.id, message.chat.title)

    if command.args is None or not command.args.isdigit():
        titles = await search_title(message)
        await send_title_to_chat(titles, message.chat.id)
    else:
        await id_search_title(message, command)


@start_router.message(ChatTypeFilter(chat_type="group"))
async def cmd_start_group(message: types.Message):
    await message.answer(
        f"–î–ª—è –º–æ–µ–π —Ä–∞–±–æ—Ç—ã, –≤—ã–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ —Å –ø—É–Ω–∫—Ç–æ–º {html.bold('–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å')}"
    )
