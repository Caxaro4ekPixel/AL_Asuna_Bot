from datetime import datetime
import difflib
import io
import re
import logging


def name_week_day(week_day):
    day = {0: "Понедельник", 1: "Вторник", 2: "Среда", 3: "Четверг", 4: "Пятница", 5: "Суббота", 6: "Воскресенье"}
    return day[week_day]


def name_month(mon_day):
    month_name = {1: 'янв', 2: 'фев', 3: 'мар', 4: 'апр', 5: 'май', 6: 'июн', 7: 'июл', 8: 'авг', 9: 'сен', 10: 'окт', 11: 'ноя', 12: 'дек'}
    return month_name[mon_day]


def similarity(s1, s2):
    normalized1 = s1.lower()
    normalized2 = s2.lower()
    matcher = difflib.SequenceMatcher(None, normalized1, normalized2)
    return matcher.ratio()


def normolize_text(s):
    a = []
    for i in re.sub(r'\(.*\)', '', re.sub(r'\[[^\]]+\]', '', s)).split(' '):
        if i != '':
            a.append(i)
    b = []
    for i in a:
        if not re.search(r'\d', i) and '.mkv' not in i and '-' != i:
            b.append(i)
    nor_s = (' '.join(i for i in b))
    return nor_s


def log(mess, log_type='info'):
    logging.basicConfig(filename='logging file.log', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                        datefmt='%d-%b-%y %H:%M:%S', level='INFO')
    if log_type == 'info':
        logging.info(mess)
    elif log_type == 'error':
        logging.error(mess)


def convert_to_preferred_format(sec):
    sec = sec % (24 * 3600)
    hour = sec // 3600
    sec %= 3600
    min = sec // 60
    sec %= 60
    return "%02d:%02d:%02d" % (hour, min, sec)


def ass_to_srt(file_in_bytes, file_name):
    lines = file_in_bytes.decode()
                
    # split the file into events
    events = ''.join(lines).strip().split('Dialogue: ')

    # extract the relevant information from each event
    srt_events = []
    event_dict = {}
    for event in events[1:]:
        elements = event.split(',')
        start = elements[1].replace(".", ",")
        end = elements[2].replace(".", ",")
        effect = elements[8]
        
        # Highlight signs
        if not effect: 
            text = ','.join(elements[9:]).strip().replace("\\N", " ")
        else:
            text = "[" + ','.join(elements[9:]).strip().replace("\\N", " ") + "]"
        
        # remove "{ }" symbols and everything between them
        text = re.sub(r'{.*?}', '', text)
        
        # concatenate lines with same start and end time
        key = (start, end)
        if key in event_dict:
            old_text = str(event_dict[key][2])
            if old_text == text:
                continue
            new_text = old_text + "\n" + text
            event_dict[key] = (start, end, new_text)
        else:
            event_dict[key] = (start, end, text)

        # convert the dictionary to a list
        srt_events = list(event_dict.values())

    # write the SRT file
    srt_text = '\n'.join([f'{i}\n{start}0 --> {end}0\n{text}\n' for i, (start, end, text) in enumerate(srt_events, 2)])
    asuna_str = f"1\n0:00:00,00 --> 0:00:00,00\nGenerated by Asuna Bot at {datetime.today()}\n\n"
    # TODO: datetime.today как то по другому лучше сделать мб
    file = io.BytesIO()
    file.write(bytes(asuna_str, 'utf-8'))
    file.write(bytes(srt_text, 'utf-8'))
    file.seek(0)
    file.name = file_name.replace('.ass', '.srt')

    return file
