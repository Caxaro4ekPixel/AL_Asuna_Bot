from datetime import datetime
import difflib
import io
import re
import logging


def name_week_day(week_day):
    day = {0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–í—Ç–æ—Ä–Ω–∏–∫", 2: "–°—Ä–µ–¥–∞", 3: "–ß–µ—Ç–≤–µ—Ä–≥", 4: "–ü—è—Ç–Ω–∏—Ü–∞", 5: "–°—É–±–±–æ—Ç–∞", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
    return day[week_day]


def name_month(mon_day):
    month_name = {1: '—è–Ω–≤', 2: '—Ñ–µ–≤', 3: '–º–∞—Ä', 4: '–∞–ø—Ä', 5: '–º–∞–π', 6: '–∏—é–Ω', 7: '–∏—é–ª', 8: '–∞–≤–≥', 9: '—Å–µ–Ω', 10: '–æ–∫—Ç', 11: '–Ω–æ—è', 12: '–¥–µ–∫'}
    return month_name[mon_day]


def similarity(s1, s2):
    normalized1 = s1.lower()
    normalized2 = s2.lower()
    matcher = difflib.SequenceMatcher(None, normalized1, normalized2)
    return matcher.ratio()


def normolize_text(s):
    a = []
    for i in re.sub(r'\(.*\)', '', re.sub(r'\[[^\]]+\]', '', s)).split(' '):
        if i != '':
            a.append(i)
    b = []
    for i in a:
        if not re.search(r'\d', i) and '.mkv' not in i and '-' != i:
            b.append(i)
    nor_s = (' '.join(i for i in b))
    return nor_s


def log(mess, log_type='info'):
    logging.basicConfig(filename='logging file.log', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                        datefmt='%d-%b-%y %H:%M:%S', level='INFO')
    if log_type == 'info':
        logging.info(mess)
    elif log_type == 'error':
        logging.error(mess)


def convert_to_preferred_format(sec):
    sec = sec % (24 * 3600)
    hour = sec // 3600
    sec %= 3600
    min = sec // 60
    sec %= 60
    return "%02d:%02d:%02d" % (hour, min, sec)

def parse_text(elements) -> str:
        effect = elements[8]
        text = ''.join(elements[9:]).strip().replace("\\N", " ")
        if effect: 
            text = "[" + text + "]"
        else:
            tags = ("\\fn", "\\shad", "\\bord", "\\fade")
            for tag in tags:
                if tag in text:
                    text = "[" + text + "]"
                    break
        return re.sub(r'{.*?}', '', text.replace("‚Äî", ""))

def ass_to_srt(file_in_bytes, file_name):
    lines = file_in_bytes.decode()
                
    # remove everything but Dialogue
    lines = [l for l in lines if l.startswith('Dialogue: ')]

    # split the file into events
    events = ''.join(lines).strip().split('Dialogue: ')

    srt_events = []
    i = 1
    while i < len(events[1:]):
        event = events[i]
        elements = event.split(',')
        start = elements[1].replace(".", ",")
        end = elements[2].replace(".", ",")
        text = parse_text(elements)
        
        # check if the end time of the current line is greater than the start time of the next line
        while i < len(events[1:]) - 1:
            next_event = events[i + 1]
            next_elements = next_event.split(',')
            next_start = next_elements[1].replace(".", ",")
            next_end = next_elements[2].replace(".", ",")
            next_text = parse_text(next_elements)
            if text == next_text:
                i += 1
                continue

            if end > next_start:
                if not '[' in next_text:
                    text += '\n‚Äî' + next_text
                else: 
                    text += '\n' + next_text
                end = next_end
                i += 1
            
            else:
                break
                
        srt_events.append((start, end, text))
        i += 1

    todays_datetime = datetime.today().strftime('%H:%M:%S %B %d, %Y')

    # write the SRT file
    srt_text = '\n'.join([f'{i}\n{start}0 --> {end}0\n{text}\n' for i, (start, end, text) in enumerate(srt_events, 2)])
    asuna_str = f"1\n0:00:00,00 --> 0:00:00,00\nGenerated by Asuna Bot at {todays_datetime}\n\n"

    file = io.BytesIO()
    file.write(bytes(asuna_str, 'utf-8'))
    file.write(bytes(srt_text, 'utf-8'))
    file.seek(0)
    file.name = file_name.replace('.ass', '.srt')

    return file


def send_res_rel_time(timer, bot, relese, cur, response, con):
    days = timer.days
    _time = convert_to_preferred_format(timer.seconds)
    daysstr = ('–¥–µ–Ω—å' if 2 > days > 0 else ('–¥–Ω—è' if 1 < days < 5 else '–¥–Ω–µ–π'))
    if days >= 0:
        # 734264203 relese[0]
        bot.send_message(chat_id=relese[0], text=f"üïò–°–µ—Ä–∏—è –≤—ã—à–ª–∞ –∑–∞:üïò\n{days} {daysstr} –∏ {_time}\n\n#Time")
        cur.execute(f'''select * from results where chat = {int(relese[0])}''')
        temp = cur.fetchone()
        if temp:
            cur.execute(f'''update results set time = "{(timer.days * 86400) + timer.seconds}", last_up = {response["updated"]} where id = {temp[0]}''')
        else:
            cur.execute(
                f'''insert into results ('id', 'chat', 'relese', 'time', 'last_up') values ({response["id"]} ,{relese[0]}, "{relese[5]}", "{(timer.days * 86400) + timer.seconds}", {response["updated"]})''')

        last_ser = response['player']['series']['last']
        all_ser = (response['type']['series'] if response['type']['series'] is not None else '?')
        if last_ser == all_ser:
            cur.execute(f'''delete from chats where id_relese={int(response["id"])}''')
            bot.send_message(chat_id=relese[0], text=f"–†–µ–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –í—Å–µ–º —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! –≠—Ç–æ—Ç —á–∞—Ç –±–æ–ª–µ–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
    con.commit()